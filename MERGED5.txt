----------------------- ALICE APPLE --------------------------

import java.io.*;
import java.util.Scanner;

class Main {
    static int minApples(int M, int K, int N, int S, int W, int E) {

        if (M <= S * K)
            return M;

        else if (M <= S * K + E + W)
            return S * K + (M - S * K) * K;

        else
            return -1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int M = sc.nextInt();

        int K = sc.nextInt();
        int N = sc.nextInt();
        int S = sc.nextInt();
        int W = sc.nextInt();
        int E = sc.nextInt();

        int ans = minApples(M, K, N, S, W, E);
        System.out.println(ans);

        sc.close();
    }
}

----------------------- BOOTHS ALGO --------------------------

class Main {

    static void add(int ac[], int x[], int qrn) {
        int i, c = 0;
        for (i = 0; i < qrn; i++) {
            ac[i] = ac[i] + x[i] + c;

            if (ac[i] > 1) {
                ac[i] = ac[i] % 2;
                c = 1;
            } else {
                c = 0;
            }
        }
    }

    static void complement(int a[], int n) {
        int i;
        int[] x = new int[8];
        x[0] = 1;

        for (i = 0; i < n; i++) {
            a[i] = (a[i] + 1) % 2;
        }
        add(a, x, n);
    }
    static void rightShift(int ac[], int qr[],
            int qn, int qrn) {
        int temp, i;
        temp = ac[0];
        qn = qr[0];

        System.out.print("\t\trightShift\t");

        for (i = 0; i < qrn - 1; i++) {
            ac[i] = ac[i + 1];
            qr[i] = qr[i + 1];
        }
        qr[qrn - 1] = temp;
    }
    static void display(int ac[], int qr[], int qrn) {
        int i;


        for (i = qrn - 1; i >= 0; i--) {
            System.out.print(ac[i]);
        }
        System.out.print("\t");


        for (i = qrn - 1; i >= 0; i--) {
            System.out.print(qr[i]);
        }
    }


    static void boothAlgorithm(int br[], int qr[], int mt[],
            int qrn, int sc) {

        int qn = 0;
        int[] ac = new int[10];
        int temp = 0;
        System.out.print("qn\tq[n+1]\t\tBR\t\tAC\tQR\t\tsc\n");
        System.out.print("\t\t\tinitial\t\t");

        display(ac, qr, qrn);
        System.out.print("\t\t" + sc + "\n");

        while (sc != 0) {
            System.out.print(qr[0] + "\t" + qn);


            if ((qn + qr[0]) == 1) {
                if (temp == 0) {

                    add(ac, mt, qrn);
                    System.out.print("\t\tA = A - BR\t");

                    for (int i = qrn - 1; i >= 0; i--) {
                        System.out.print(ac[i]);
                    }
                    temp = 1;
                }

                else if (temp == 1) {

                    add(ac, br, qrn);
                    System.out.print("\t\tA = A + BR\t");

                    for (int i = qrn - 1; i >= 0; i--) {
                        System.out.print(ac[i]);
                    }
                    temp = 0;
                }
                System.out.print("\n\t");
                rightShift(ac, qr, qn, qrn);
            }

            else if (qn - qr[0] == 0) {
                rightShift(ac, qr, qn, qrn);
            }

            display(ac, qr, qrn);

            System.out.print("\t");

            sc--;
            System.out.print("\t" + sc + "\n");
        }
    }

    static void reverse(int a[]) {
        int i, k, n = a.length;
        int t;
        for (i = 0; i < n / 2; i++) {
            t = a[i];
            a[i] = a[n - i - 1];
            a[n - i - 1] = t;
        }
    }

    // Driver code
    public static void main(String[] args) {
        int[] mt = new int[10];
        int sc;
        int brn, qrn;

        brn = 4;

        int br[] = { 0, 1, 1, 0 };
        for (int i = brn - 1; i >= 0; i--) {
            mt[i] = br[i];
        }

        reverse(br);

        complement(mt, brn);
        qrn = 4;
        sc = qrn;
        int qr[] = { 1, 0, 1, 0 };
        reverse(qr);

        boothAlgorithm(br, qr, mt, qrn, sc);

        System.out.print("\n"
                + "Result = ");

        for (int i = qrn - 1; i >= 0; i--) {
            System.out.print(qr[i]);
        }
    }
}

----------------------- LEXOGRAPHICALLY FIRST --------------------------
import java.util.Scanner;

class Main {

    static char MAX_CHAR = 26;
    static void countFreq(String str, int freq[], int len) {
        for (int i = 0; i < len; i++) {
            freq[str.charAt(i) - 'a']++;
        }
    }
    static boolean canMakePalindrome(int freq[], int len) {
        int count_odd = 0;
        for (int i = 0; i < MAX_CHAR; i++) {
            if (freq[i] % 2 != 0) {
                count_odd++;
            }
        }
        if (len % 2 == 0) {
            if (count_odd > 0) {
                return false;
            } else {
                return true;
            }
        }
        if (count_odd != 1) {
            return false;
        }

        return true;
    }
    static String findOddAndRemoveItsFreq(int freq[]) {
        String odd_str = "";
        for (int i = 0; i < MAX_CHAR; i++) {
            if (freq[i] % 2 != 0) {
                freq[i]--;
                odd_str = odd_str + (char) (i + 'a');
                return odd_str;
            }
        }
        return odd_str;
    }
    static String findPalindromicString(String str) {
        int len = str.length();
        int freq[] = new int[MAX_CHAR];
        countFreq(str, freq, len);

        if (!canMakePalindrome(freq, len)) {
            return "No Palindromic String";
        }
        String odd_str = findOddAndRemoveItsFreq(freq);

        String front_str = "", rear_str = " ";
        for (int i = 0; i < MAX_CHAR; i++) {
            String temp = "";
            if (freq[i] != 0) {
                char ch = (char) (i + 'a');
                for (int j = 1; j <= freq[i] / 2; j++) {
                    temp = temp + ch;
                }
                front_str = front_str + temp;
                rear_str = temp + rear_str;
            }
        }
        return (front_str + odd_str + rear_str);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        System.out.println(findPalindromicString(str));
    }
}

----------------------- MANCHERS ALGO --------------------------
import java.util.*;

class Main
{
	static void findLongestPalindromicString(String text)
	{
		int N = text.length();
		if (N == 0)
			return;
		N = 2 * N + 1; 
		int[] L = new int[N + 1]; 
		L[0] = 0;
		L[1] = 1;
		int C = 1; 
		int R = 2; 
		int i = 0; 
		int iMirror; 
		int maxLPSLength = 0;
		int maxLPSCenterPosition = 0;
		int start = -1;
		int end = -1;
		int diff = -1;

		for (i = 2; i < N; i++)
		{
			iMirror = 2 * C - i;
			L[i] = 0;
			diff = R - i;
			if (diff > 0)
				L[i] = Math.min(L[iMirror], diff);
			while (((i + L[i]) + 1 < N && (i - L[i]) > 0) &&
							(((i + L[i] + 1) % 2 == 0) ||
						(text.charAt((i + L[i] + 1) / 2) ==
						text.charAt((i - L[i] - 1) / 2))))
			{
				L[i]++;
			}

			if (L[i] > maxLPSLength)
			{
				maxLPSLength = L[i];
				maxLPSCenterPosition = i;
			}
			if (i + L[i] > R)
			{
				C = i;
				R = i + L[i];
			}
		}

		start = (maxLPSCenterPosition - maxLPSLength) / 2;
		end = start + maxLPSLength - 1;
		System.out.printf("LPS of string is %s : ", text);
		for (i = start; i <= end; i++)
			System.out.print(text.charAt(i));
		System.out.println();
	}
	public static void main(String[] args)
	{
        Scanner sc = new Scanner(System.in);
		String text = sc.nextLine();
		findLongestPalindromicString(text);
	}
}

----------------------- WEIGHTED SUBSTRING --------------------------
import java.util.*;
class Main{
    static int distinctSubString(String P, String Q,int K, int N) {
        HashSet<String> S = new HashSet<String>();
        for (int i = 0; i < N; ++i) {
            int sum = 0;
            String s = "";
            for (int j = i; j < N; ++j) {
                int pos = P.charAt(j) - 'a';
                sum += Q.charAt(pos) - '0';
                s += P.charAt(j);
                if (sum <= K) {
                    S.add(s);
                }
                else {
                    break;
                }
            }
        }
        return S.size();
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String P = sc.nextLine();
        String Q = sc.nextLine();
        int K = 5;
        int N = P.length();
        System.out.print(distinctSubString(P, Q, K, N));
    }
}

----------------------- MANUVERING --------------------------

import java.util.Scanner;

public class Main {

    static int path(int m, int n) {
        if (m == 1 || n == 1)
            return 1;

        return path(m - 1, n) + path(m, n - 1);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a,b,c;
         System.out.println("Enter test cases : ");
         c=sc.nextInt();
         while(c-- > 0)
         {
            System.out.println("Enter number of rows and columns : ");
          a=sc.nextInt();
          b=sc.nextInt();
         System.out.println(path(a,b));
         }
          
        
    }
}

----------------------- COMBINATION --------------------------
// Java program to print all combination of size r in an array of size n
import java.io.*;

class Combination {
	static void combinationUtil(int arr[], int data[], int start,
								int end, int index, int r)
	{
	
		if (index == r)
		{
			for (int j=0; j<r; j++)
				System.out.print(data[j]+" ");
			System.out.println("");
			return;
		}


	for (int i=start; i<=end && end-i+1 >= r-index; i++)
		{
			data[index] = arr[i];
			combinationUtil(arr, data, i+1, end, index+1, r);
		}
	}


	
	static void printCombination(int arr[], int n, int r)
	{
	
		int data[]=new int[r];


		combinationUtil(arr, data, 0, n-1, 0, r);
	}


	public static void main (String[] args) {
		int arr[] = {1, 2, 3, 4, 5};
		int r = 3;
		int n = arr.length;
		printCombination(arr, n, r);
	}
}

