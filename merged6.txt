----------------------- MOVE HYPHEN --------------------------
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        String originalString = sc.nextLine();

        String modifiedString = "-" + originalString.replaceAll("-", "");
        System.out.println(modifiedString);
    }
}

----------------------- HAMILTONIAN CYLE --------------------------

import java.util.Scanner;

class HamiltonianCycle {
    final int V = 5;
    int path[];
    boolean isSafe(int v, int graph[][], int path[], int pos) {
        if (graph[path[pos - 1]][v] == 0)
            return false;
        for (int i = 0; i < pos; i++)
            if (path[i] == v)
                return false;
        return true;
    }
    boolean hamCycleUtil(int graph[][], int path[], int pos) {
        if (pos == V) {
            if (graph[path[pos - 1]][path[0]] == 1)
                return true;
            else
                return false;
        }

        for (int v = 1; v < V; v++) {

            if (isSafe(v, graph, path, pos)) {
                path[pos] = v;

                if (hamCycleUtil(graph, path, pos + 1) == true)
                    return true;

                path[pos] = -1;
            }
        }

        return false;
    }

    int hamCycle(int graph[][]) {
        path = new int[V];
        for (int i = 0; i < V; i++)
            path[i] = -1;

        path[0] = 0;
        if (hamCycleUtil(graph, path, 1) == false) {
            System.out.println("\nSolution does not exist");
            return 0;
        }

        printSolution(path);
        return 1;
    }

    void printSolution(int path[]) {
        System.out.println("Solution Exists: Following" +
                " is one Hamiltonian Cycle");
        for (int i = 0; i < V; i++)
            System.out.print(" " + path[i] + " ");

        System.out.println(" " + path[0] + " ");
    }

    public static void main(String args[]) {
        HamiltonianCycle hamiltonian = new HamiltonianCycle();

        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int m = sc.nextInt();

        int graph[][] = new int[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++) graph[i][j] = sc.nextInt();
        }

        hamiltonian.hamCycle(graph);
    }
}

----------------------- WINDERSOFF ALGO --------------------------
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

class GFG {
    public static int N = 0;

    public static final int cx[] = { 1, 1, 2, 2, -1, -1, -2, -2 };
    public static final int cy[] = { 2, -2, 1, -1, 2, -2, 1, -1 };

    boolean limits(int x, int y) {
        return ((x >= 0 && y >= 0) &&
                (x < N && y < N));
    }

    boolean isempty(int a[], int x, int y) {
        return (limits(x, y)) && (a[y * N + x] < 0);
    }

    int getDegree(int a[], int x, int y) {
        int count = 0;
        for (int i = 0; i < N; ++i)
            if (isempty(a, (x + cx[i]),
                    (y + cy[i])))
                count++;

        return count;
    }

    Cell nextMove(int a[], Cell cell) {
        int min_deg_idx = -1, c,
                min_deg = (N + 1), nx, ny;

        int start = ThreadLocalRandom.current().nextInt(1000) % N;
        for (int count = 0; count < N; ++count) {
            int i = (start + count) % N;
            nx = cell.x + cx[i];
            ny = cell.y + cy[i];
            if ((isempty(a, nx, ny)) &&
                    (c = getDegree(a, nx, ny)) < min_deg) {
                min_deg_idx = i;
                min_deg = c;
            }
        }

        if (min_deg_idx == -1)
            return null;

        nx = cell.x + cx[min_deg_idx];
        ny = cell.y + cy[min_deg_idx];

        a[ny * N + nx] = a[(cell.y) * N +
                (cell.x)] + 1;

        cell.x = nx;
        cell.y = ny;

        return cell;
    }

    void print(int a[]) {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j)
                System.out.printf("%d\t", a[j * N + i]);
            System.out.printf("\n");
        }
    }

    boolean neighbour(int x, int y, int xx, int yy) {
        for (int i = 0; i < N; ++i)
            if (((x + cx[i]) == xx) &&
                    ((y + cy[i]) == yy))
                return true;

        return false;
    }

    boolean findClosedTour() {

        int a[] = new int[N * N];
        for (int i = 0; i < N * N; ++i)
            a[i] = -1;

        int sx = 3;
        int sy = 2;

        Cell cell = new Cell(sx, sy);

        a[cell.y * N + cell.x] = 1;

        Cell ret = null;
        for (int i = 0; i < N * N - 1; ++i) {
            ret = nextMove(a, cell);
            if (ret == null)
                return false;
        }

        if (!neighbour(ret.x, ret.y, sx, sy))
            return false;

        print(a);
        return true;
    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();

        new GFG().findClosedTour();
    }
}

class Cell {
    int x;
    int y;

    public Cell(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

----------------------- RAT IN A MAZE --------------------------
import java.util.Scanner;

public class RatMaze {
    final int N = 4;

    void printSolution(int sol[][]) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(" " + sol[i][j] + " ");
            System.out.println();
        }
    }

    boolean isSafe(int maze[][], int x, int y) {

        return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1);
    }

    boolean solveMaze(int maze[][]) {
        int sol[][] = { { 0, 0, 0, 0 },
                { 0, 0, 0, 0 },
                { 0, 0, 0, 0 },
                { 0, 0, 0, 0 } };

        if (solveMazeUtil(maze, 0, 0, sol) == false) {
            System.out.print("Solution doesn't exist");
            return false;
        }

        printSolution(sol);
        return true;
    }

    boolean solveMazeUtil(int maze[][], int x, int y,
            int sol[][]) {

        if (x == N - 1 && y == N - 1) {
            sol[x][y] = 1;
            return true;
        }

        if (isSafe(maze, x, y) == true) {

            sol[x][y] = 1;

            if (solveMazeUtil(maze, x + 1, y, sol))
                return true;

            if (solveMazeUtil(maze, x, y + 1, sol))
                return true;

            sol[x][y] = 0;
            return false;
        }

        return false;
    }

    public static void main(String args[]) {
        RatMaze rat = new RatMaze();

        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int m = sc.nextInt();

        int arr[][] = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++) arr[i][j] = sc.nextInt();
        }
        rat.solveMaze(arr);
    }
}

----------------------- N QUEENS --------------------------
import java.util.Scanner;

public class NQueenProblem {
    final int N = 4;

    void printSolution(int board[][]) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(" " + board[i][j]+ " ");
            System.out.println();
        }
    }

    boolean isSafe(int board[][], int row, int col) {
        int i, j;

        for (i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;

        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        for (i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    boolean solveNQUtil(int board[][], int col) {

        if (col >= N)
            return true;

        for (int i = 0; i < N; i++) {

            if (isSafe(board, i, col)) {

                board[i][col] = 1;

                if (solveNQUtil(board, col + 1) == true)
                    return true;

                board[i][col] = 0;
            }
        }

        return false;
    }

    boolean solveNQ() {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int board[][] = new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++) board[i][j] = 0;
        }

        if (solveNQUtil(board, 0) == false) {
            System.out.print("Solution does not exist");
            return false;
        }

        printSolution(board);
        return true;
    }

    public static void main(String args[]) {
        NQueenProblem Queen = new NQueenProblem();
        Queen.solveNQ();
    }
}

----------------------- PERMUTATION OF STRING --------------------------

import java.util.*;
class Solution {

    static int factorial(int n) {
        int f = 1;
        for (int i = 1; i <= n; i++)
            f = f * i;
        return f;
    }

    static void print(char[] temp) {
        for (int i = 0; i < temp.length; i++)
            System.out.print(temp[i]);
        System.out.println();
    }

static int calculateTotal(char[] temp, int n) {
	int f = factorial(n);

	
	HashMap<Character, Integer> hm =
					new HashMap<Character, Integer>();
	for (int i = 0; i < temp.length; i++) {
	if (hm.containsKey(temp[i]))
		hm.put(temp[i], hm.get(temp[i]) + 1);
	else
		hm.put(temp[i], 1);
	}

	for (Map.Entry e : hm.entrySet()) {
	Integer x = (Integer)e.getValue();
	if (x > 1) {
		int temp5 = factorial(x);
		f = f / temp5;
	}
	}
	return f;
}

    static void nextPermutation(char[] temp) {

        int i;
        for (i = temp.length - 1; i > 0; i--)
            if (temp[i] > temp[i - 1])
                break;

        int min = i;
        int j, x = temp[i - 1];
        for (j = i + 1; j < temp.length; j++)
            if ((temp[j] < temp[min]) && (temp[j] > x))
                min = j;

        char temp_to_swap;
        temp_to_swap = temp[i - 1];
        temp[i - 1] = temp[min];
        temp[min] = temp_to_swap;

        Arrays.sort(temp, i, temp.length);

        print(temp);
    }

    static void printAllPermutations(String s) {

        char temp[] = s.toCharArray();
        Arrays.sort(temp);

        print(temp);

        int total = calculateTotal(temp, temp.length);
        for (int i = 1; i < total; i++)
            nextPermutation(temp);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        printAllPermutations(s);
    }
}